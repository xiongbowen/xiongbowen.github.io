<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>常用powershell脚本汇总</title>
    <link href="/2022/12/02/PowerShell%E8%84%9A%E6%9C%AC%E6%B1%87%E6%80%BB/"/>
    <url>/2022/12/02/PowerShell%E8%84%9A%E6%9C%AC%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="powershell脚本"><a href="#powershell脚本" class="headerlink" title="powershell脚本"></a>powershell脚本</h1><p>常用powershell脚本汇总</p><h2 id="二、获取大组的成员数量"><a href="#二、获取大组的成员数量" class="headerlink" title="二、获取大组的成员数量"></a>二、获取大组的成员数量</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">(<span class="hljs-built_in">Get-ADGroup</span> mygroup <span class="hljs-literal">-properties</span> members |<span class="hljs-built_in">select-object</span> <span class="hljs-literal">-Expandproperty</span> members).members<br></code></pre></td></tr></table></figure><h2 id="三、powershell的参数"><a href="#三、powershell的参数" class="headerlink" title="三、powershell的参数"></a>三、powershell的参数</h2><ol><li>参数集：一堆参数，不能同时使用，例如，不同的tab表示不同的参数集<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">show-command</span> <span class="hljs-built_in">get-eventlog</span><br></code></pre></td></tr></table></figure></li><li>位置参数：只有参数名在[]</li><li>开关参数：没有参数值的参数</li><li>可选参数：参数名和参数值在同一个[]内</li><li>通用参数：所有的命令都支持的参数，比如，-verbeos</li></ol><h2 id="四、什么是提供程序"><a href="#四、什么是提供程序" class="headerlink" title="四、什么是提供程序"></a>四、什么是提供程序</h2><p>一个Powershell的提供程序，或者说PSProvider，其本质上是一个适配器。它可以接受某此数据在储，并使得这些介质看起来像是磁盘驱动器一样。你可以通过下面的命令查看当前 Shell 中己经存在的提供程序。<br> <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">Get-PSProvider</span><br></code></pre></td></tr></table></figure><br>我们可以通过模块或者管理单元将一些提供程序添加到 PowerShell 中，这也是Powershell 仅支持的两种扩展方式。（我们会在第7章中讲解该部分知识。）有些时候，如果启用了某些 PowerShell 功能，可能也会新增一个 PSProvider。比如，当开启了远程处理时（将在第13 章中讨论该话题），会新增一个 PSProvider，</p><p>我们可以看出每个提供程序都有各自不同的功能。这非常重要，因为这将决定如何使用这些提供程序。下面是常见的一些功能描述。<br>ShouldProcess这部分提供程序支持-WhatIf 和-Confirm参数我们在正式执行这部分脚本之前可以对它们进行测试。<br>Filter–在Cmdlet 中操作提供程序的数据时，支持-Filter 参数。<br>Credentials.-该提供程序允许使用可变更的凭据连接数据存储。这也就是-Credentials 参数的作用。<br>Transactions该提供程序支持事务，也就是允许你在该提供程序中名个变更作为一个原子操作进行提交或者全部回滚。<br>你也可以使用某个提供程序创建一个 PSDrive。 PsDrive 可以通过一个特定的提供序连接到某些存储数据的介质。这和在 Windows 资源管理器中类似，本质上是创建了个驱动器映射。但是由于 PSDrive 使用了提供程序，除了可以连接磁盘之外，还能连接更多的数据存储介质。运行下面的命会，可以看到当前已连接的驱动器。</p><h2 id="PowerShe11获取AD-OU的安全访问权限acl-ace"><a href="#PowerShe11获取AD-OU的安全访问权限acl-ace" class="headerlink" title="PowerShe11获取AD OU的安全访问权限acl ace"></a>PowerShe11获取AD OU的安全访问权限acl ace</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$SearchBase</span>=“OU=MAILGROUPTEST, dc=xx,dc=com”<br><span class="hljs-variable">$SysManObj</span>= [<span class="hljs-type">ADSI</span>] (<span class="hljs-string">&quot;LDAP://<span class="hljs-variable">$SearchBase</span>&quot;</span>) <span class="hljs-comment">#get the OU object</span><br><span class="hljs-variable">$t</span>= <span class="hljs-variable">$SysManobj</span>.psbase.ObjectSecurity.Access<br><span class="hljs-variable">$t</span> |<span class="hljs-built_in">select</span> *|?&#123;<span class="hljs-variable">$_</span>.IdentityReference <span class="hljs-operator">-like</span> <span class="hljs-string">&quot;*adself*&quot;</span>&#125;<br></code></pre></td></tr></table></figure><h2 id="通过ADSI连接AD或本地系统接口"><a href="#通过ADSI连接AD或本地系统接口" class="headerlink" title="通过ADSI连接AD或本地系统接口"></a>通过ADSI连接AD或本地系统接口</h2><p>adsi将返回一些System._comobject对象，那么怎么转换对象为可读的值呢</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$adsi</span>.convertlargeintegertoint64(<span class="hljs-variable">$adsi</span>.lastlogontimestamp[<span class="hljs-number">0</span>])<br></code></pre></td></tr></table></figure><h2 id="PowerShell获取AD对象的ACL"><a href="#PowerShell获取AD对象的ACL" class="headerlink" title="PowerShell获取AD对象的ACL"></a>PowerShell获取AD对象的ACL</h2><ol><li>方式一<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs PowerShell">获取AD对象的acl<br><span class="hljs-built_in">Get-acl</span> ad:”cn=xiongbowen,dc=centoso,dc=com”<br></code></pre></td></tr></table></figure></li><li>方式二<figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$Searcher</span> = <span class="hljs-built_in">New-Object</span> System.DirectoryServices.DirectorySearcher(<span class="hljs-string">&#x27;(samaccountname=HQ-b59404$)&#x27;</span>)<br><span class="hljs-variable">$Searcher</span>.SecurityMasks = [<span class="hljs-type">System.DirectoryServices.SecurityMasks</span>]::Dacl <span class="hljs-operator">-bor</span> [<span class="hljs-type">System.DirectoryServices.SecurityMasks</span>]::Owner<br><span class="hljs-variable">$Result</span> = <span class="hljs-variable">$Searcher</span>. FindOne()<br><span class="hljs-variable">$Result</span>.Properties.ntsecuritydescriptor[<span class="hljs-number">0</span>]. gettype()<br><span class="hljs-variable">$ADSecurityDescriptor</span>.SetSecurityDescriptorBinaryForm(<span class="hljs-variable">$Result</span>.Properties.ntsecuritydescriptor[<span class="hljs-number">0</span>])<br><span class="hljs-variable">$ADSecurityDescriptor</span><br><span class="hljs-variable">$ADSecurityDescriptor</span>.Access <br></code></pre></td></tr></table></figure></li></ol><h2 id="本地用户的验证方法："><a href="#本地用户的验证方法：" class="headerlink" title="本地用户的验证方法："></a>本地用户的验证方法：</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">Add-Type</span> <span class="hljs-literal">-assemblyname</span> system.DirectoryServices.accountmanagement<br><span class="hljs-variable">$DS</span> = <span class="hljs-built_in">New-Object</span> System.DirectoryServices.AccountManagement.PrincipalContext([<span class="hljs-type">System.DirectoryServices.AccountManagement.ContextType</span>]::Machine,<span class="hljs-string">&quot;isk&quot;</span>)<br><span class="hljs-variable">$DS</span>.ValidateCredentials(<span class="hljs-string">&quot;isk&quot;</span>,<span class="hljs-string">&quot;xxxxxx&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="获取ad账号过期时间，并转换时间格式"><a href="#获取ad账号过期时间，并转换时间格式" class="headerlink" title="获取ad账号过期时间，并转换时间格式"></a>获取ad账号过期时间，并转换时间格式</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-string">&quot;zhangsan</span><br><span class="hljs-string">lisi</span><br><span class="hljs-string"> xiongbowen&quot;</span><br><span class="hljs-operator">-split</span> <span class="hljs-string">&quot;`r`n&quot;</span> |%&#123;<span class="hljs-built_in">Get-ADUser</span> <span class="hljs-variable">$_</span><br><span class="hljs-literal">-Properties</span><br>msDS<span class="hljs-literal">-UserPasswordExpiryTimeComputed</span>|<br><span class="hljs-built_in">Select</span> <span class="hljs-literal">-Property</span> <span class="hljs-string">&quot;SamAccountName&quot;</span>, &#123;Name=<span class="hljs-string">&quot;ExpiryDate&quot;</span>;Expression=｛[<span class="hljs-built_in">datetime</span>]::FromFileTime (<span class="hljs-variable">$_</span>. <span class="hljs-string">&quot;msDS-UserPasswordExpiryTimeComputed&quot;</span>)]&#125; &#125;<br></code></pre></td></tr></table></figure><h2 id="夺权提权windows"><a href="#夺权提权windows" class="headerlink" title="夺权提权windows"></a>夺权提权windows</h2> <figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bat">takeown /S <span class="hljs-number">10</span>.<span class="hljs-number">1</span>.<span class="hljs-number">48</span>.<span class="hljs-number">95</span> /U centoso\admin /p xxxux /f  C:\myfolder<br>Takeown /f C:\ONE /r /d y<br></code></pre></td></tr></table></figure><h2 id="修改文件-文件夹的ACL"><a href="#修改文件-文件夹的ACL" class="headerlink" title="修改文件/文件夹的ACL"></a>修改文件/文件夹的ACL</h2><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bat"><span class="hljs-built_in">cacls</span>.exe &quot;d:\test.txt&quot; /e /t /p users:r<br></code></pre></td></tr></table></figure><h2 id="设置用户可以登陆的工作站"><a href="#设置用户可以登陆的工作站" class="headerlink" title="设置用户可以登陆的工作站"></a>设置用户可以登陆的工作站</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">set-aduser</span> xiongbowen   <span class="hljs-literal">-logonworkstations</span> comp1,comp2,comp3<br><span class="hljs-comment">#**同时要加上跳板机和目标机器**</span><br></code></pre></td></tr></table></figure><h2 id="如何查询域用户，本地用户在对应组的加入时间，以及他们最后登录的时间。"><a href="#如何查询域用户，本地用户在对应组的加入时间，以及他们最后登录的时间。" class="headerlink" title="如何查询域用户，本地用户在对应组的加入时间，以及他们最后登录的时间。"></a>如何查询域用户，本地用户在对应组的加入时间，以及他们最后登录的时间。</h2><h3 id="对于域用户，最后登录时间很容易，get-aduser就能获取了。注意一下时间格式转换"><a href="#对于域用户，最后登录时间很容易，get-aduser就能获取了。注意一下时间格式转换" class="headerlink" title="对于域用户，最后登录时间很容易，get-aduser就能获取了。注意一下时间格式转换"></a>对于域用户，最后登录时间很容易，get-aduser就能获取了。注意一下时间格式转换</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">get-aduser</span> yli <span class="hljs-literal">-Properties</span> lastlogon | <span class="hljs-built_in">select</span> name, <span class="hljs-selector-tag">@</span>&#123;n=<span class="hljs-string">&quot;Lastlogon&quot;</span>;e=&#123;[<span class="hljs-built_in">datetime</span>]::FromFileTime(<span class="hljs-variable">$_</span>.lastlogon)&#125;&#125;<br></code></pre></td></tr></table></figure><h3 id="域用户加入组的时间需要在对应的DC上查询metadata。比如查询域管理员都是什么时候加入这个组的"><a href="#域用户加入组的时间需要在对应的DC上查询metadata。比如查询域管理员都是什么时候加入这个组的" class="headerlink" title="域用户加入组的时间需要在对应的DC上查询metadata。比如查询域管理员都是什么时候加入这个组的"></a>域用户加入组的时间需要在对应的DC上查询metadata。比如查询域管理员都是什么时候加入这个组的</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$pdc</span>=<span class="hljs-built_in">Get-ADDomainController</span> <span class="hljs-literal">-Discover</span> <span class="hljs-literal">-Service</span> PrimaryDC<br><span class="hljs-variable">$dn</span>=(<span class="hljs-built_in">get-adgroup</span> <span class="hljs-string">&quot;domain admins&quot;</span>).distinguishedname<br><span class="hljs-built_in">Get-ADReplicationAttributeMetadatax</span> <span class="hljs-variable">$dn</span> <span class="hljs-literal">-Server</span> <span class="hljs-variable">$pdc</span> <span class="hljs-literal">-ShowAllLinkedValues</span> | <span class="hljs-built_in">Where-Object</span> &#123;<span class="hljs-variable">$_</span>.attributename <span class="hljs-operator">-eq</span> <span class="hljs-string">&#x27;member&#x27;</span>&#125; | <span class="hljs-built_in">select</span> FirstOriginatingcreatetime, attributevalue<br></code></pre></td></tr></table></figure><h3 id="本地用户的登录时间需要用-adsi来查询。在AD-模块开发之前，管理员只能用ADSI来操纵AD和本地对象。现在操作AD可以直接用模块了，但是本地的貌似还得用ADSI才行。"><a href="#本地用户的登录时间需要用-adsi来查询。在AD-模块开发之前，管理员只能用ADSI来操纵AD和本地对象。现在操作AD可以直接用模块了，但是本地的貌似还得用ADSI才行。" class="headerlink" title="本地用户的登录时间需要用 adsi来查询。在AD 模块开发之前，管理员只能用ADSI来操纵AD和本地对象。现在操作AD可以直接用模块了，但是本地的貌似还得用ADSI才行。"></a>本地用户的登录时间需要用 adsi来查询。在AD 模块开发之前，管理员只能用ADSI来操纵AD和本地对象。现在操作AD可以直接用模块了，但是本地的貌似还得用ADSI才行。</h3><p>比如查询本机的所有本地用户的上一次登录时间</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$adsi</span> = [<span class="hljs-type">ADSI</span>]<span class="hljs-string">&quot;WinNT://<span class="hljs-variable">$env:COMPUTERNAME</span>&quot;</span><span class="hljs-comment">#WinNT严格区分大小写</span><br><span class="hljs-variable">$adsi</span>.Children | <span class="hljs-built_in">where</span> &#123;<span class="hljs-variable">$_</span>.SchemaClassName <span class="hljs-operator">-eq</span> <span class="hljs-string">&#x27;user&#x27;</span>&#125;  | <span class="hljs-built_in">select</span> name,Lastlogin<br></code></pre></td></tr></table></figure><p>如何修改cmd和powershell的字符集</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">chcp <span class="hljs-number">65001</span> <span class="hljs-comment">#UTF-8</span><br>chcp <span class="hljs-number">936</span> <span class="hljs-comment">#GBK</span><br></code></pre></td></tr></table></figure><h2 id="如何通过WMI和PowerShell获取COM对象列表"><a href="#如何通过WMI和PowerShell获取COM对象列表" class="headerlink" title="如何通过WMI和PowerShell获取COM对象列表"></a>如何通过WMI和PowerShell获取COM对象列表</h2><p>让我们看看 WMI 可以告诉我们有关系统上 COM 对象的信息。</p><p>获取包含单词“COM”的所有 WMI 类的列表（执行区分大小写的匹配以避免像“computer”这样的条目）。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">gwmi</span> <span class="hljs-literal">-list</span> | ?&#123; <span class="hljs-variable">$_</span>.Name <span class="hljs-operator">-cmatch</span> <span class="hljs-string">&quot;COM&quot;</span> &#125;<br> <br>   NameSpace: ROOT\cimv2<br> <br>Name                                Methods              Properties<br>----                                -------              ----------<br>MSFT_WMI_GenericNonCOMEvent         &#123;&#125;                   &#123;ProcessId, PropertyNames, PropertyValues, ProviderName...&#125;<br>Win32_COMApplication                &#123;&#125;                   <br></code></pre></td></tr></table></figure><p>Win32_COMApplication给了我大约 386 个结果。它包括与 COM 对象关联的 COM object.AppID</p><p>所有 COM 对象都有一个基本上是 COM 对象的 128 位十六进制全局唯一标识符 （GUID）。这样，可以独立于其安装路径引用 COM 对象。CLSID在网络计算机上也是唯一的（与 DCOM 一起使用时是相关的）。CLSID<br>WMI 对象将此称为。它们也可以在注册表中找到。例如，对于写字板是ComponentIDHKEY_LOCAL_MACHINE\SOFTWARE\Classes\CLSIDCLSID{73FDDC80-AEA9-101A-98A7-00AA00374959}</p><p>CLSID不容易记住，有时具有不同功能的COM对象可以互换使用（例如：不同版本的Internet Explorer会有所不同，但您需要某种方式来引用Internet Explorer COM对象，以便使用系统上安装的任何版本）。因此，您有（编程标识符）。CLSIDCLSIDProgID<br>ProgIDs 可以在注册表中找到。ProgID 的格式由句点分隔，没有空格。例如，对于写字板是。HKEY_LOCAL_MACHINE\SOFTWARE\Classes<Program>.<Component>.<Version>ProgIDWordPad.Document.1</p><p>PowerShell的cmdlet在创建引用COM对象时所使用的SO S与我们相关。New-ObjectProgIDProgID</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs PowerShell">help <span class="hljs-built_in">New-Object</span> <span class="hljs-literal">-Parameter</span> ComObject<br> <br><span class="hljs-literal">-ComObject</span> &lt;String&gt;<br>    Specifies the programmatic identifier (ProgID) of the COM object.<br> <br>    Required?                    true<br>    Position?                    <span class="hljs-number">1</span><br>    Default value                None<br>    Accept pipeline input?       false<br>    Accept wildcard characters?  false<br></code></pre></td></tr></table></figure><p>虽然与当前主题无关，但还有一个是另一个 128 位十六进制 GUID。您可以在此处阅读有关它的更多信息。AppID<br>现在，让我们获取每个 WMI 类返回的对象数的列表。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">gwmi</span> <span class="hljs-literal">-list</span> | ?&#123; <span class="hljs-variable">$_</span>.Name <span class="hljs-operator">-cmatch</span> <span class="hljs-string">&quot;COM&quot;</span> &#125; | <span class="hljs-built_in">ft</span> Name,<span class="hljs-selector-tag">@</span>&#123;Name=<span class="hljs-string">&quot;Number of objects&quot;</span>;Expr=&#123;(<span class="hljs-built_in">gwmi</span> <span class="hljs-variable">$_</span>.Name | <span class="hljs-built_in">Measure-Object</span> <span class="hljs-literal">-Line</span>).Lines&#125;&#125; <span class="hljs-literal">-AutoSize</span><br> <br>Name                                      Number of objects<br>----                                      -----------------<br>MSFT_WMI_GenericNonCOMEvent                               <span class="hljs-number">0</span><br>Win32_COMApplication                                    <span class="hljs-number">397</span><br><br><span class="hljs-comment"># store the results from each class in a variable; filter out ones where ProgID is $null</span><br><span class="hljs-variable">$COMClassicSet</span> = <span class="hljs-built_in">gwmi</span> Win32_ClassicCOMClassSetting | ?&#123; <span class="hljs-variable">$_</span>.ProgId <span class="hljs-operator">-ne</span> <span class="hljs-variable">$null</span> &#125; | <span class="hljs-built_in">Sort-Object</span><br><span class="hljs-variable">$COMSet</span> = <span class="hljs-built_in">gwmi</span> Win32_COMSetting | ?&#123; <span class="hljs-variable">$_</span>.ProgId <span class="hljs-operator">-ne</span> <span class="hljs-variable">$null</span> &#125; | <span class="hljs-built_in">Sort</span><br><span class="hljs-built_in">Compare-Object</span> <span class="hljs-variable">$COMSet</span> <span class="hljs-variable">$COMClassicSet</span><br><br></code></pre></td></tr></table></figure> <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs powershell">  <span class="hljs-built_in">gwmi</span> <span class="hljs-literal">-list</span> | ?&#123; <span class="hljs-variable">$_</span>.Name <span class="hljs-operator">-cmatch</span> <span class="hljs-string">&quot;COM&quot;</span> &#125; | <span class="hljs-built_in">ft</span> Name,<span class="hljs-selector-tag">@</span>&#123;Name=<span class="hljs-string">&quot;Number of objects&quot;</span>;Expr=&#123;(<span class="hljs-built_in">gwmi</span> <span class="hljs-variable">$_</span>.Name | ?&#123; <span class="hljs-variable">$_</span>.ProgID <span class="hljs-operator">-ne</span> <span class="hljs-variable">$null</span> &#125; | <span class="hljs-built_in">Measure-Object</span> <span class="hljs-literal">-Line</span>).Lines&#125;&#125; <span class="hljs-literal">-AutoSize</span><br> <br>Name                                      Number of objects<br>----                                      -----------------<br>MSFT_WMI_GenericNonCOMEvent                               <span class="hljs-number">0</span><br>Win32_COMApplication                                      <span class="hljs-number">0</span><br>Win32_DCOMApplication                                     <span class="hljs-number">0</span><br>Win32_COMClass                                            <span class="hljs-number">0</span><br>Win32_ClassicCOMClass                                     <span class="hljs-number">0</span><br>Win32_COMSetting                                       <span class="hljs-number">1613</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">gwmi</span> <span class="hljs-literal">-list</span> | ?&#123; <span class="hljs-variable">$_</span>.Name <span class="hljs-operator">-cmatch</span> <span class="hljs-string">&quot;COM&quot;</span> &#125; | <span class="hljs-built_in">ft</span> Name,<span class="hljs-selector-tag">@</span>&#123;Name=<span class="hljs-string">&quot;Number of objects&quot;</span>;Expr=&#123;(<span class="hljs-built_in">gwmi</span> <span class="hljs-variable">$_</span>.Name | <span class="hljs-built_in">Measure-Object</span> <span class="hljs-literal">-Line</span>).Lines&#125;&#125; <span class="hljs-literal">-AutoSize</span><br> <br>Name                                      Number of objects<br>----                                      -----------------<br>MSFT_WMI_GenericNonCOMEvent                               <span class="hljs-number">0</span><br>Win32_COMApplication                                    <span class="hljs-number">397</span><br></code></pre></td></tr></table></figure><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">gwmi</span> Win32_COMSetting | ?&#123; <span class="hljs-variable">$_</span>.ProgId <span class="hljs-operator">-match</span> <span class="hljs-string">&quot;Internet&quot;</span> &#125; | <span class="hljs-built_in">ft</span> ProgId,Caption<br></code></pre></td></tr></table></figure><p>如果只有一个版本，则可以跳过版本号，这就是 whytoo 工作的原因。ProgIDInternetExplorer.Application</p><p>更新：事实上，只有 theandclasses 包含它们的输出。因此，这是唯一可以使用的两个类。由于它们唯一的区别是包含没有任何对象（在我们的例子中没有用！），因此可以使用任何一个类。Win32_COMSettingWin32_ClassicCOMClassSettingProgIDWin32_COMSettingProgID</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs powershell"> <span class="hljs-built_in">gwmi</span> <span class="hljs-literal">-list</span> | ?&#123; <span class="hljs-variable">$_</span>.Name <span class="hljs-operator">-cmatch</span> <span class="hljs-string">&quot;^Win32.*COM&quot;</span> &#125; | ?&#123; <span class="hljs-selector-tag">@</span>(<span class="hljs-built_in">gwmi</span> <span class="hljs-variable">$_</span>.Name | <span class="hljs-built_in">gm</span> <span class="hljs-literal">-MemberType</span> Property | <span class="hljs-built_in">select</span> <span class="hljs-literal">-Unique</span> <span class="hljs-literal">-Expand</span> Name).Contains(<span class="hljs-string">&quot;ProgId&quot;</span>) &#125;<br> <br> <br>   NameSpace: ROOT\cimv2<br> <br>Name                                Methods              Properties<br>----                                -------              ----------<br>Win32_COMSetting                    &#123;&#125;                   &#123;Caption, Description, SettingID&#125;<br>Win32_ClassicCOMClassSetting        &#123;&#125;                   &#123;AppID, AutoConvertToClsid, AutoTreatAsClsid, Caption...&#125;<br></code></pre></td></tr></table></figure><p>更新2：事实证明，WMI不是获取COM对象列表的好方法。更好的方法是查询注册表。请参阅我的下一篇文章。</p><h2 id="如何从注册表中获取-COM-对象的列表"><a href="#如何从注册表中获取-COM-对象的列表" class="headerlink" title="如何从注册表中获取 COM 对象的列表"></a>如何从注册表中获取 COM 对象的列表</h2><p>今天，我正在我的机器上寻找COMfor Excel，但我以前使用WMI的方法不起作用。ProgID</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">gwmi</span> Win32_COMSetting | ?&#123; <span class="hljs-variable">$_</span>.ProgId <span class="hljs-operator">-match</span> <span class="hljs-string">&quot;Excel&quot;</span> &#125;<br></code></pre></td></tr></table></figure><p>这是不正确的，因为我可以通过引用来创建新的COM对象。Excel.Application</p><p>由于在注册表中找到了我认为这将是获取详尽列表的好地方。在此键下有三种类型的子项：ProgIDHKEY_LOCAL_MACHINE\SOFTWARE\Classes</p><p>在系统中注册的每个文件扩展名的子项，每个子项都有带有的条目和一个带有的子项。不过，并非所有这些似乎都是有效的（基于我的测试），因此最好使用下面详述的其他子项集。(Default)ProgIDProgIDProgIDs<br>每个子键 - 通常是两种格式和 - 同样，并非所有有效，但有效性的一个很好的测试（基于我的测试）是它们是否包含调用的子键。ProgIDProgID<Program>.<Component>.<Version><Program>.<Component>CLSID<br>子键，如“未知”、“未定”等，还有一些看起来像但格式不正确的子键（例如：它们不包含 thebit，或包含空格和下划线（不允许）ProgID<Component>.<Version>)<br>因此，过滤掉的一种明智方法似乎是检查格式的子项（可选）并进一步过滤掉具有子键的子键。ProgIDs<Program>.<Component>.<Version><Version>CLSID</p><p>因此，我们有以下内容：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">Get-ChildItem</span> <span class="hljs-string">&quot;HKLM:\SOFTWARE\Classes&quot;</span> | <br>  ?&#123; (<span class="hljs-variable">$_</span>.PSChildName <span class="hljs-operator">-match</span> <span class="hljs-string">&quot;^[a-z]+\.[a-z]+(\.\d+)?<span class="hljs-variable">$</span>&quot;</span>) <span class="hljs-operator">-and</span> (<span class="hljs-variable">$_</span>.GetSubKeyNames() <span class="hljs-operator">-contains</span> <span class="hljs-string">&quot;CLSID&quot;</span>) &#125; | <span class="hljs-built_in">ft</span> PSChildName<br></code></pre></td></tr></table></figure><p>要搜索特定的应用程序，可以执行以下操作：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">Get-ChildItem</span> <span class="hljs-string">&quot;HKLM:\SOFTWARE\Classes&quot;</span> | <br>  ?&#123; (<span class="hljs-variable">$_</span>.PSChildName <span class="hljs-operator">-match</span> <span class="hljs-string">&quot;^[a-z]+\.[a-z]+(\.\d+)?<span class="hljs-variable">$</span>&quot;</span>) <span class="hljs-operator">-and</span> (<span class="hljs-variable">$_</span>.GetSubKeyNames() <span class="hljs-operator">-contains</span> <span class="hljs-string">&quot;CLSID&quot;</span>) &#125; | <br>  ?&#123; <span class="hljs-variable">$_</span>.PSChildName <span class="hljs-operator">-match</span> <span class="hljs-string">&quot;Excel&quot;</span> &#125; | <span class="hljs-built_in">ft</span> PSChildName<br></code></pre></td></tr></table></figure><h2 id="查找昨天修改的所有-GPO"><a href="#查找昨天修改的所有-GPO" class="headerlink" title="查找昨天修改的所有 GPO"></a>查找昨天修改的所有 GPO</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">Get-GPO</span> <span class="hljs-literal">-All</span> | ?&#123; ([<span class="hljs-built_in">datetime</span>]::today - (<span class="hljs-variable">$_</span>.ModificationTime)).Days <span class="hljs-operator">-le</span> <span class="hljs-number">1</span> &#125; | <span class="hljs-built_in">ft</span> DisplayName,ModificationTime<br></code></pre></td></tr></table></figure><p>并报告这些相同 GPO 中的设置，请执行以下操作：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">Get-GPO</span> <span class="hljs-literal">-All</span> | ?&#123; ([<span class="hljs-built_in">datetime</span>]::today - (<span class="hljs-variable">$_</span>.ModificationTime)).Days <span class="hljs-operator">-le</span> <span class="hljs-number">1</span> &#125; | %&#123; <span class="hljs-built_in">Get-GPOReport</span> <span class="hljs-variable">$_</span>.DisplayName <span class="hljs-literal">-ReportType</span> HTML &#125; &gt; Report.html<br></code></pre></td></tr></table></figure><p>是的，我最后用 &gt; 而不是 Out-File。老毛病了</p><h2 id="如果你注册不上dll，请安装对应版本的c"><a href="#如果你注册不上dll，请安装对应版本的c" class="headerlink" title="如果你注册不上dll，请安装对应版本的c++"></a>如果你注册不上dll，请安装对应版本的c++</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs batch">C:\WINDOWS\system32\regsvr32.exe xxx.dll<br></code></pre></td></tr></table></figure><h2 id="owner与managerby的区别"><a href="#owner与managerby的区别" class="headerlink" title="owner与managerby的区别"></a>owner与managerby的区别</h2><p>owner是指此对象的acl权限，即在此对象的安全选项卡中，此对象acl的所有者</p><p>managerby是管理者，当你赋予一个人管理此组时，同时勾选了“管理员可更新成员列表”，即会会在acl中授予一条ace，</p><h2 id="为什么有了managerby还需要msExchCoManagedByLink"><a href="#为什么有了managerby还需要msExchCoManagedByLink" class="headerlink" title="为什么有了managerby还需要msExchCoManagedByLink"></a>为什么有了managerby还需要msExchCoManagedByLink</h2><p>为了向后兼容<br>我看到了一个由Exchange 2010功能管理的多种奇怪的行为（至少对我来说是这样）。只是想知道这背后的原因是什么。</p><p>我注意到Exchange将AD的ManagedBy及其自己的Managed By（msExchCoManagedByLink）用户一起显示。如果我只添加一个使用Exchange 2010快照，它将添加到AD的managedBy属性中（而不是msExchCoManagedByLink），如果我添加多个用户作为Managed By，那么将首先添加到AD的mandBy属性中，其他用户将添加到Exchange的msExchCoManagedByLink属性中。</p><p>我还注意到，Exchange中有一个限制，我们无法将安全组、分发组或非邮件启用用户设置为管理者。只有邮箱或启用邮件的用户才能由管理。但在AD中，我们可以将安全组或非邮件启用组设置为管理者。因此，如果我在AD中将安全组设置为管理者，然后尝试在Exchange 2010中查看管理列表，它不会显示这一点。如果我尝试添加新的管理者（邮箱或启用邮件的用户），它会抛出一个异常，即特定的xyz是一个安全组，无法在按列表管理中添加。（请记住，我从AD添加了这个组，现在我正在添加一个邮箱）</p><p>对我来说，这似乎是一种奇怪的行为，因为如果Exchange和AD的管理标准都不同，那么为什么Exchange要处理AD的管理者？为什么Exchange无法存储其所有托管的属性（msExchCoManagedByLink）。以及为什么我无法为托管的特定组使用此功能，该组设置了一个安全组和/或非启用邮件的组（正如我描述的那样，我收到了错误）。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">Cet<span class="hljs-literal">-ADGroup</span> mygroup <span class="hljs-literal">-Properties</span> * |<span class="hljs-built_in">SELECT</span> msExchCoManagedByLink<br><br>CN=zhansan,<span class="hljs-number">0</span>U=test,DC=centoso,DC=com,CN=xbw,DC=centoso,DC=com)<br></code></pre></td></tr></table></figure><p>我可以回答您问题的第一部分（为什么Exchange UI中的属性同时使用managedBy和msExchCoManagedBy）。这是为向后兼容性而完成的。</p><p>因此，在旧版本的Exchange中，“managedBy”是唯一用于组所有权的属性，AD中的此属性是单个值属性。Exchange 2010希望允许组的多个所有者，因此他们引入了一个新的多值属性（以免更改旧属性的模式并打破向后兼容性）。因此，为了保护旧客户环境并保持其功能，他们对第一个所有者使用“manangedBy”属性（这使得只有managedBy填充工作的旧AD），然后当您想添加更多所有者时，它们会扩展到msExchCoManangedBy。</p><p>不确定为什么您不能将组和非邮件启用的对象用作所有者。</p>]]></content>
    
    
    <categories>
      
      <category>PowerShell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Windows PowerShell 配置文件</title>
    <link href="/2022/12/02/powershell%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <url>/2022/12/02/powershell%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="Windows-PowerShell-配置文件"><a href="#Windows-PowerShell-配置文件" class="headerlink" title="Windows PowerShell 配置文件"></a>Windows PowerShell 配置文件</h1><p>添加别名、函数和变量时，实际上仅是在将它们添加到当前的 Windows PowerShell 会话中。如果退出会话或者关闭 Windows PowerShell，则更改将丢失。<br>若要保留这些更改，可以创建 Windows PowerShell 配置文件，然后将别名、函数和变量添加到配置文件。每次启动 Windows PowerShell 时，都会加载该配置文件。<br>若要加载配置文件，Windows PowerShell 执行策略必须允许您加载配置文件。如果它不允许，则加载配置文件的尝试将失败，而且 Windows PowerShell 显示一条错误消息。</p><h2 id="了解配置文件"><a href="#了解配置文件" class="headerlink" title="了解配置文件"></a>了解配置文件</h2><p>在 Windows PowerShell 中可以有四个不同的配置文件。配置文件按加载顺序列出。较特定的配置文件优先于较不特定的配置文件（如果它们适用）。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell">%windir%\system32\WindowsPowerShell\v1.<span class="hljs-number">0</span>\profile.ps1<span class="hljs-comment">#此配置文件适用于所有用户和所有 shell。</span><br>%windir%\system32\WindowsPowerShell\v1.<span class="hljs-number">0</span>\ Microsoft.PowerShell_profile.ps1<span class="hljs-comment">#此配置文件适用于所有用户，但仅适用于 Microsoft.PowerShell shell。</span><br>%UserProfile%\My Documents\WindowsPowerShell\profile.ps1<span class="hljs-comment">#此配置文件仅适用于当前用户，但会影响所有 shell。</span><br>%UserProfile%\My Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1<span class="hljs-comment">#此配置文件仅适用于当前用户和 Microsoft.PowerShell shell。</span><br></code></pre></td></tr></table></figure><h2 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h2><p>在创建或者导入变量、别名或函数，或者添加 Windows PowerShell 管理单元时，这些元素只是添加到当前会话中。如果退出该会话或者关闭窗口，这些元素将丢失。<br>若要保存经常使用的变量、别名、函数和命令并使它们可以在每个 Windows PowerShell 会话中使用，请将它们添加到 Windows PowerShell 配置文件中。</p><p>还可以创建、共享和分发配置文件，以便在较大的企业中强制实施 Windows PowerShell 的统一视图。<br>Windows PowerShell 配置文件不是自动创建的。若要创建配置文件，请在指定位置中创建具有指定名称的文本文件。通常，将使用特定于用户、特定于 shell 的配置文件，这种配置文件称为 Windows PowerShell 用户配置文件。此配置文件的位置存储在 $profile 变量中。<br>若要显示 Windows PowerShell 配置文件的路径，请键入：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$profile</span><br></code></pre></td></tr></table></figure><p>若要确定是否已经在系统上创建了 Windows PowerShell 配置文件，请键入：<br>test-path $profile<br>如果存在配置文件，则响应为 True：否则响应为 False。<br>若要创建 Windows PowerShell 配置文件，请键入：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">new-item</span> <span class="hljs-literal">-path</span> <span class="hljs-variable">$profile</span> <span class="hljs-literal">-itemtype</span> file <span class="hljs-literal">-force</span><br></code></pre></td></tr></table></figure><p>若要在记事本中打开配置文件，请键入：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">notepad <span class="hljs-variable">$profile</span><br></code></pre></td></tr></table></figure><p>若要创建其他配置文件之一，如适用于所有用户和所有 shell 的配置文件，请键入：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">new-item</span> <span class="hljs-literal">-path</span> <span class="hljs-variable">$env:windir</span>\System32\WindowsPowerShell\v1.<span class="hljs-number">0</span>\profile.ps1 <span class="hljs-literal">-itemtype</span> file <span class="hljs-literal">-force</span><br></code></pre></td></tr></table></figure><p>仅当配置文件的路径和文件名与 $profile 变量中存储的路径和文件名完全一致时，配置文件才有效。因此，如果在记事本中创建一个配置文件并保存它，或者将一个配置文件复制到您的系统中，则一定要用 $profile 变量中指定的文件名将该文件保存到在此变量中指定的路径下。<br>如果在记事本中创建配置文件，请将文件名用引号括起来，以保留 PS1 文件扩展名。例如：<br>“Microsoft.PowerShell_profile.ps1”<br>如果没有引号，则记事本会将 .txt 文件扩展名追加到文件，而 Windows PowerShell 将无法识别它。<br>使用配置文件存储日常使用的别名、函数和变量。一个非常有用的函数会在您最喜爱的文本编辑器中打开用户配置文件。例如，以下命令会创建一个名为 pro 的函数，该函数用于在记事本中打开用户配置文件。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">pro</span></span> &#123; notepad <span class="hljs-variable">$profile</span> &#125;<br></code></pre></td></tr></table></figure><p>有了设计良好的配置文件，就可以更轻松地使用 Windows PowerShell 和管理系统。</p><h2 id="文件夹重定向"><a href="#文件夹重定向" class="headerlink" title="文件夹重定向"></a>文件夹重定向</h2><p>打开注册表，然后定位到注册表的这个位置<br>HHKEY_CURRENT_USER\Software Microsoft\Windows\CurrentVersion\Ex<br>plorer\User Shell Folders</p>]]></content>
    
    
    <categories>
      
      <category>PowerShell</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PowerShell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>batch</title>
    <link href="/2022/12/02/batch/"/>
    <url>/2022/12/02/batch/</url>
    
    <content type="html"><![CDATA[<h2 id="查询dc服务器"><a href="#查询dc服务器" class="headerlink" title="查询dc服务器"></a>查询dc服务器</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">nltest<br></code></pre></td></tr></table></figure><h2 id="命令行关闭-windows-10防火墙"><a href="#命令行关闭-windows-10防火墙" class="headerlink" title="命令行关闭 windows 10防火墙"></a>命令行关闭 windows 10防火墙</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">netsh advfirewall <span class="hljs-built_in">set</span> allprofiles state off  <span class="hljs-comment">#关闭防火墙</span><br>netsh advfirewall show allprofiles           <span class="hljs-comment">#查看防火墙状态</span><br></code></pre></td></tr></table></figure><h2 id="获得远程桌面的端口"><a href="#获得远程桌面的端口" class="headerlink" title="获得远程桌面的端口"></a>获得远程桌面的端口</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">reg query <span class="hljs-string">&quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot;</span> /v PortNumber<br></code></pre></td></tr></table></figure><h2 id="注册表开启远程桌面服务"><a href="#注册表开启远程桌面服务" class="headerlink" title="注册表开启远程桌面服务"></a>注册表开启远程桌面服务</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">REG ADD <span class="hljs-string">&quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server&quot;</span> /v <span class="hljs-string">&quot;fDenyTSConnections&quot;</span> /t REG_DWORD /d <span class="hljs-number">0</span> /f<br></code></pre></td></tr></table></figure><h2 id="更改注册表允许导入外部模块"><a href="#更改注册表允许导入外部模块" class="headerlink" title="更改注册表允许导入外部模块"></a>更改注册表允许导入外部模块</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">Set-ItemProperty</span> HKLM:\SOFTWARE\Microsoft\PowerShell\<span class="hljs-number">1</span>\ShellIds\Microsoft.PowerShell <span class="hljs-literal">-Name</span> ExecutionPolicy <span class="hljs-literal">-Value</span> Bypass  <span class="hljs-comment">#更改注册表允许导入外部模块</span><br></code></pre></td></tr></table></figure><p>Import-Module \10.1.48.250\psm1\get-oa-user-title-two.psm1</p><h2 id="psexec远程访问"><a href="#psexec远程访问" class="headerlink" title="psexec远程访问"></a>psexec远程访问</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell">&gt;D:\PsExec.exe \\<span class="hljs-number">10.1</span>.<span class="hljs-number">71.35</span>   <span class="hljs-literal">-u</span> centoso\administrtaor <span class="hljs-literal">-p</span> C0nsole@yun <span class="hljs-literal">-s</span> cmd<br>whoami /groups<br>Mandatory Label\System Mandatory Level    标签   S<span class="hljs-literal">-1</span><span class="hljs-literal">-16</span><span class="hljs-literal">-16384</span> <br>&gt;D:\PsExec.exe \\<span class="hljs-number">10.1</span>.<span class="hljs-number">71.35</span>   <span class="hljs-literal">-u</span> lexinfintech\administrtaor <span class="hljs-literal">-p</span> C0nsole@yun <span class="hljs-literal">-h</span> cmd<br>whoami /groups<br>Mandatory Label\High Mandatory Level    标签   S<span class="hljs-literal">-1</span><span class="hljs-literal">-16</span><span class="hljs-literal">-12288</span> <br></code></pre></td></tr></table></figure><h2 id="验证ad账号和密码"><a href="#验证ad账号和密码" class="headerlink" title="验证ad账号和密码"></a>验证ad账号和密码</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$Try</span> = <span class="hljs-keyword">New</span>-<span class="hljs-keyword">Object</span> System.DirectoryServices.DirectoryEntry(<span class="hljs-string">&quot;LDAP://DC=centoso,DC=Com&quot;</span>, <span class="hljs-string">&quot;zhansan&quot;</span>, <span class="hljs-string">&quot;xxxxxx&quot;</span>)<br><span class="hljs-variable">$Try</span><br></code></pre></td></tr></table></figure><h2 id="计算机改名重启"><a href="#计算机改名重启" class="headerlink" title="计算机改名重启"></a>计算机改名重启</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">netdom renamecomputer rockli<span class="hljs-literal">-Pc2</span>  /newname:rubikwang<span class="hljs-literal">-Pc1</span> /userd:centoso\administrator /passwordd:xxxxxxxxxyun /force /reboot:<span class="hljs-number">60</span><br></code></pre></td></tr></table></figure><h2 id="创建定时任务"><a href="#创建定时任务" class="headerlink" title="创建定时任务"></a>创建定时任务</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">schtasks /create /tn <span class="hljs-string">&quot;shutdown&quot;</span> /tr <span class="hljs-string">&quot;shutdown -s -t 0&quot;</span> /<span class="hljs-built_in">sc</span> daily /st <span class="hljs-number">22</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>  /ru administrator /<span class="hljs-built_in">rp</span> C0nsole@yun<br></code></pre></td></tr></table></figure><h2 id="格式化输出Windows定时任务"><a href="#格式化输出Windows定时任务" class="headerlink" title="格式化输出Windows定时任务"></a>格式化输出Windows定时任务</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">schtasks.exe /query /v /fo csv | <span class="hljs-built_in">ConvertFrom-Csv</span> |<br> <span class="hljs-built_in">Where-Object</span> &#123; <span class="hljs-variable">$_</span>.TaskName <span class="hljs-operator">-ne</span> <span class="hljs-string">&#x27;TaskName&#x27;</span> &#125; |<br> <span class="hljs-built_in">Sort-Object</span> TaskName | <span class="hljs-built_in">Out-GridView</span> <span class="hljs-literal">-Title</span> <span class="hljs-string">&#x27;All scheduled tasks&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="注册表"><a href="#注册表" class="headerlink" title="注册表"></a>注册表</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-keyword">if</span> ((<span class="hljs-built_in">Get-WmiObject</span> <span class="hljs-literal">-Class</span> Win32_OperatingSystem).Caption <span class="hljs-operator">-like</span> <span class="hljs-string">&quot;*7*&quot;</span>)<br>    &#123;<br><span class="hljs-built_in">Set-ItemProperty</span> HKCU:\<span class="hljs-string">&#x27;Control Panel&#x27;</span>\Desktop <span class="hljs-literal">-name</span> <span class="hljs-string">&quot;ScreenSaveTimeOut&quot;</span> <span class="hljs-literal">-value</span> <span class="hljs-number">300</span><br><span class="hljs-built_in">Set-ItemProperty</span> HKCU:\<span class="hljs-string">&#x27;Control Panel&#x27;</span>\Desktop <span class="hljs-literal">-name</span> <span class="hljs-string">&quot;ScreenSaverIsSecure&quot;</span> <span class="hljs-literal">-value</span> <span class="hljs-number">1</span><br><span class="hljs-built_in">Set-ItemProperty</span> HKCU:\<span class="hljs-string">&#x27;Control Panel&#x27;</span>\Desktop <span class="hljs-literal">-name</span> <span class="hljs-string">&quot;SCRNSAVE.EXE&quot;</span> <span class="hljs-literal">-value</span> C:\Windows\system32\Mystify.scr<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="快速获得远程桌面的端口"><a href="#快速获得远程桌面的端口" class="headerlink" title="快速获得远程桌面的端口"></a>快速获得远程桌面的端口</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell">reg query <span class="hljs-string">&quot;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp&quot;</span> /v PortNumber<br><br>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Terminal Server\WinStations\RDP<span class="hljs-literal">-Tcp</span><br>    PortNumber    REG_DWORD    <span class="hljs-number">0</span>xd3d<br></code></pre></td></tr></table></figure><h2 id="获取进程pid"><a href="#获取进程pid" class="headerlink" title="获取进程pid"></a>获取进程pid</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">Get-wmiobject</span> <span class="hljs-literal">-class</span> win32_service <span class="hljs-literal">-fliter</span> “name=‘dot3svc’” ｜<span class="hljs-built_in">select</span> *<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>wmic命令行使用</title>
    <link href="/2022/12/02/wmic/"/>
    <url>/2022/12/02/wmic/</url>
    
    <content type="html"><![CDATA[<h1 id="wmic命令行使用"><a href="#wmic命令行使用" class="headerlink" title="wmic命令行使用"></a>wmic命令行使用</h1><h2 id="获取硬件信息"><a href="#获取硬件信息" class="headerlink" title="获取硬件信息"></a>获取硬件信息</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs batch">wmic csproduct /?<br>wmic csproduct list<br></code></pre></td></tr></table></figure><h2 id="获取内置系统帐号"><a href="#获取内置系统帐号" class="headerlink" title="获取内置系统帐号"></a>获取内置系统帐号</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs batch">wmic sysaccount /?<br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows wmic</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用powershell脚本汇总</title>
    <link href="/2022/12/01/NETSTAT/"/>
    <url>/2022/12/01/NETSTAT/</url>
    
    <content type="html"><![CDATA[<h1 id="nestat的解释"><a href="#nestat的解释" class="headerlink" title="nestat的解释"></a>nestat的解释</h1><ol><li>0.0.0.0的意思是任意地址。表示本机的时候，0.0.0.0代表本机所有可用地址；当外部地址用的时候，表示所有网络地址。</li><li>localhost:777 表示 localhost(其实就是本机)的777端口(只能通过127.3. 0.0.1/localhost 来访问)，</li><li>0.0.0.0:3389 表示本机的3389端口(可以通过本机的任何IP访问)。</li><li>0.0.0.0:0 和 *:*都表示当前状态下没有对端</li><li>tcp面向连接，所以通信的时候会有一个明确的对端，但当前状态下只是侦听状态(后面的LISTEN)，还没有连接建立起来，所以用0.0.0.0:0</li><li>udp无连接，永远不会有连接对端的说法。所以*:*</li></ol><hr>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>gunicorn和nginx部署</title>
    <link href="/2021/07/14/gunicorn%E5%92%8Cnginx%E9%83%A8%E7%BD%B2/"/>
    <url>/2021/07/14/gunicorn%E5%92%8Cnginx%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><h2 id="一-使用gunicorn和nginx部署"><a href="#一-使用gunicorn和nginx部署" class="headerlink" title="一. 使用gunicorn和nginx部署"></a>一. 使用gunicorn和nginx部署</h2><p>当我们执行下面的hello.py时，使用的flask自带的服务器，完成了web服务的启动。在生产环境中，flask自带的服务器，无法满足性能要求，我们这里采用Gunicorn做wsgi容器，来部署flask程序。Gunicorn（绿色独角兽）是一个Python WSGI的HTTP服务器。从Ruby的独角兽（Unicorn ）项目移植。该Gunicorn服务器与各种Web框架兼容，实现非常简单，轻量级的资源消耗。Gunicorn直接用命令启动，不需要编写配置文件，相对uWSGI要容易很多。</p><p>区分几个概念：</p><p><strong>WSGI</strong>：全称是Web Server Gateway Interface（web服务器网关接口），它是一种规范，它是web服务器和web应用程序之间的接口。它的作用就像是桥梁，连接在web服务器和web应用框架之间。</p><p><strong>uwsgi</strong>：是一种传输协议，用于定义传输信息的类型。</p><p><strong>uWSGI</strong>：是实现了uwsgi协议WSGI的web服务器。</p><p>我们的部署方式： nginx + gunicorn + flask</p><h3 id="使用Gunicorn："><a href="#使用Gunicorn：" class="headerlink" title="使用Gunicorn："></a>使用Gunicorn：</h3><p>web开发中，部署方式大致类似。简单来说，前端代理使用Nginx主要是为了实现分流、转发、负载均衡，以及分担服务器的压力。Nginx部署简单，内存消耗少，成本低。Nginx既可以做正向代理，也可以做反向代理。</p><p>正向代理：请求经过代理服务器从局域网发出，然后到达互联网上的服务器。</p><p>特点：服务端并不知道真正的客户端是谁。</p><p>反向代理：请求从互联网发出，先进入代理服务器，再转发给局域网内的服务器。</p><p>特点：客户端并不知道真正的服务端是谁。</p><p>区别：正向代理的对象是客户端。反向代理的对象是服务端。</p><p><strong>安装gunicorn</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> gunicorn<br><br></code></pre></td></tr></table></figure><p><strong>查看命令行选项</strong>： 安装gunicorn成功后，通过命令行的方式可以查看gunicorn的使用信息。</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-meta-keyword">$gunicorn</span> -h</span><br><br></code></pre></td></tr></table></figure><p><strong>直接运行</strong>：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment">#直接运行，默认启动的127.0.0.1:8000</span><br>gunicorn 运行文件名称<span class="hljs-symbol">:Flask</span>程序实例名<br></code></pre></td></tr></table></figure><p><strong>指定进程和端口号</strong>： -w: 表示进程（worker）。 -b：表示绑定ip地址和端口号（bind）。-D：表示以守护进程方式运行。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$gunicorn</span> -w <span class="hljs-number">4</span> -b <span class="hljs-number">127.0</span>.0.<span class="hljs-number">1</span><span class="hljs-symbol">:</span><span class="hljs-number">5001</span> -D 运行文件名称<span class="hljs-symbol">:Flask</span>程序实例名<br><br></code></pre></td></tr></table></figure><h3 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ sudo apt-<span class="hljs-builtin-name">get</span> install nginx<br></code></pre></td></tr></table></figure><h3 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h3><p>默认安装到/usr/local/nginx/目录，进入目录。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ sudo <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>conf/nginx.conf<br></code></pre></td></tr></table></figure><h3 id="启动nginx"><a href="#启动nginx" class="headerlink" title="启动nginx"></a>启动nginx</h3><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vala"><span class="hljs-meta">#启动</span><br>sudo sbin/nginx<br><span class="hljs-meta">#查看</span><br>ps aux | grep nginx<br><span class="hljs-meta">#停止</span><br>sudo sbin/nginx -s stop<br><span class="hljs-meta">#重启</span><br>sudo sbin/nginx -s reload<br></code></pre></td></tr></table></figure><p>打开/usr/local/nginx/conf/nginx.conf文件</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-comment"># 监听80端口</span><br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-comment"># 本机</span><br>    <span class="hljs-attribute">server_name</span> localhost; <br>    <span class="hljs-comment"># 默认请求的url</span><br>    <span class="hljs-attribute">location</span> / &#123;<br>        <span class="hljs-comment">#请求转发到gunicorn服务器</span><br>        <span class="hljs-attribute">proxy_pass</span> http://127.0.0.1:5001; <br>        <span class="hljs-comment">#设置请求头，并将头信息传递给服务器端 </span><br>        <span class="hljs-attribute">proxy_set_header</span> Host $host; <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二-使用uWSGI和nginx进行服务器部署"><a href="#二-使用uWSGI和nginx进行服务器部署" class="headerlink" title="二. 使用uWSGI和nginx进行服务器部署"></a>二. 使用uWSGI和nginx进行服务器部署</h2><p>区分几个概念：</p><p><strong>WSGI</strong>：</p><ul><li>全称是Web Server Gateway Interface（web服务器网关接口）</li><li>它是一种规范，它是web服务器和web应用程序之间的接口</li><li>它的作用就像是桥梁，连接在web服务器和web应用框架之间</li><li>没有官方的实现，更像一个协议。只要遵照这些协议，WSGI应用(Application)都可以在任何服务器(Server)上运行</li></ul><p><strong>uwsgi</strong>：是一种传输协议，用于定义传输信息的类型。常用于在uWSGI服务器与其他网络服务器的数据通信</p><p><strong>uWSGI</strong>：是实现了uwsgi协议WSGI的web服务器。</p><h2 id="阿里云服务器"><a href="#阿里云服务器" class="headerlink" title="阿里云服务器"></a>阿里云服务器</h2><ul><li>选择云服务器:阿里云服务器 <a href="https://www.aliyun.com/">https://www.aliyun.com</a></li><li>购买服务器:在首页最底下有一个免费使用的优惠购买：最便宜的套餐为9.9元，送一个入门级别的云服务器ECS和其他的一些服务器</li><li>购买后,再次进入首页最底下,点击免费获取 <a href="https://free.aliyun.com/">https://free.aliyun.com/</a><br><img src="/assets/free_get1.png" alt="免费获取1"></li><li>进入如下图所示的界面,点击第一项云服务器ECS的立即开通(由于本人已经创建,故:没有显示立即开通,而是前往控制台)<br><img src="/assets/free_get2.png" alt="免费获取2"><br><img src="/assets/server_create.png" alt="创建服务器"></li><li>创建服务器选择ubuntu16.04 64位的操作系统<br><img src="/assets/QQ20171031-150105@2x.png"></li><li>进入控制台,查看实例创建情况<br><img src="/assets/instance.png" alt="控制台"></li><li>给安全组配置规则，添加5000端口</li></ul><p><img src="/assets/%E5%AE%89%E5%85%A8%E7%BB%84.png" alt="安全组"><br><img src="/assets/%E9%85%8D%E7%BD%AE%E8%A7%84%E5%88%99.png" alt="配置规则"><br><img src="/assets/%E6%B7%BB%E5%8A%A0%E5%AE%89%E5%85%A8%E7%BB%84%E8%A7%84%E5%88%99.png"></p><ul><li>利用命令行进行远程服务器登录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh 用户名@ip地址<br></code></pre></td></tr></table></figure><h2 id="登陆后的相关软件安装"><a href="#登陆后的相关软件安装" class="headerlink" title="登陆后的相关软件安装"></a>登陆后的相关软件安装</h2><h3 id="先更新apt软件源"><a href="#先更新apt软件源" class="headerlink" title="先更新apt软件源"></a>先更新apt软件源</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">sudo apt-<span class="hljs-keyword">get</span> <span class="hljs-keyword">update</span><br></code></pre></td></tr></table></figure><h3 id="python和pip"><a href="#python和pip" class="headerlink" title="python和pip"></a>python和pip</h3><p>这两个环境是ubuntu16.04自带的</p><h3 id="uwsgi安装"><a href="#uwsgi安装" class="headerlink" title="uwsgi安装"></a>uwsgi安装</h3><ul><li>uwsgi是一个能够运行flask项目的高性能web服务器，需要先安装两个依赖</li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">apt-get <span class="hljs-keyword">install </span><span class="hljs-keyword">build-essential </span>python-dev<br></code></pre></td></tr></table></figure><ul><li>然后进行uwsgi的安装</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> uwsgi<br></code></pre></td></tr></table></figure><h3 id="nginx安装"><a href="#nginx安装" class="headerlink" title="nginx安装"></a>nginx安装</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">apt-<span class="hljs-builtin-name">get</span> install nginx<br></code></pre></td></tr></table></figure><h3 id="mysql的安装"><a href="#mysql的安装" class="headerlink" title="mysql的安装:"></a>mysql的安装:</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">apt-<span class="hljs-builtin-name">get</span> install mysql-server<br>apt-<span class="hljs-builtin-name">get</span> install libmysqlclient-dev<br></code></pre></td></tr></table></figure><h3 id="虚拟环境的安装"><a href="#虚拟环境的安装" class="headerlink" title="虚拟环境的安装"></a>虚拟环境的安装</h3><ul><li>virtualenv和virtualenvwrapper的安装：</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> virtualenv<br>pip <span class="hljs-keyword">install</span> virtualenvwrapper<br></code></pre></td></tr></table></figure><ul><li>使得安装的virtualenvwrapper生效，编辑~/.bashrc文件，内容如下:</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">WORKON_HOME</span>=<span class="hljs-variable">$HOME</span>/.virtualenvs<br><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">PROJECT_HOME</span>=<span class="hljs-variable">$HOME</span>/workspace<br>source /usr/local/bin/virtualenvwrapper.sh<br></code></pre></td></tr></table></figure><ul><li>使编辑后的文件生效</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure><h2 id="hello-world程序的部署"><a href="#hello-world程序的部署" class="headerlink" title="hello world程序的部署"></a>hello world程序的部署</h2><ul><li>利用pycharm创建python项目</li><li>创建config.ini文件作为uwsgi的初始化配置文件</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#需要声明uwsgi使得uwsgi能够识别当前文件</span><br><span class="hljs-section">[uwsgi]</span><br><span class="hljs-attr">master</span> = <span class="hljs-literal">true</span><br><span class="hljs-comment"># 使用 nginx 配合连接时使用</span><br><span class="hljs-comment"># socket = :5000</span><br><span class="hljs-comment"># 直接做web服务器使用</span><br><span class="hljs-attr">http</span> = :<span class="hljs-number">5000</span><br><span class="hljs-comment"># 设定进程数</span><br><span class="hljs-attr">processes</span> = <span class="hljs-number">4</span><br><span class="hljs-comment"># 设定线程数       </span><br><span class="hljs-attr">threads</span> = <span class="hljs-number">2</span><br><span class="hljs-comment"># 指定运行的文件</span><br><span class="hljs-attr">wsgi-file</span> = app.py<br><span class="hljs-comment">#指定运行的项目的目录[自已项目在哪个目录就用哪个目录]</span><br><span class="hljs-attr">chdir</span> = /root/home/hello_world<br><span class="hljs-comment"># 指定运行的实例</span><br><span class="hljs-attr">callable</span> = app<br><span class="hljs-comment"># 指定uwsgi服务器的缓冲大小</span><br><span class="hljs-attr">buffer-size</span> = <span class="hljs-number">32768</span><br><span class="hljs-comment"># 在虚拟环境中运行需要指定python目录</span><br><span class="hljs-attr">pythonpath</span> = /root/.virtualenvs/Flask_test/lib/python2.<span class="hljs-number">7</span>/site-packages<br><span class="hljs-comment"># 设置进程id文件</span><br><span class="hljs-attr">pidfile</span> = uwsgi.pid<br><span class="hljs-comment"># 以守护的形式运行，设置log输出位置</span><br><span class="hljs-attr">daemonize</span> = uwsgi.log<br></code></pre></td></tr></table></figure><ul><li>利用scp命令将整个项目上传到远程服务器中</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">scp -r 本地目录 用户名@ip地址:远程目录<br><br>scp -r <span class="hljs-regexp">/home/</span>python<span class="hljs-regexp">/Desktop/</span>hello_world<span class="hljs-regexp">/ root@39.106.21.198:/</span>root/home<br></code></pre></td></tr></table></figure><ul><li>通过指令运行uwsgi.ini服务器</li></ul><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">uwsgi <span class="hljs-comment">--ini config.ini</span><br></code></pre></td></tr></table></figure><ul><li>查看</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ps</span> ajx|<span class="hljs-keyword">grep</span> uwsgi<br></code></pre></td></tr></table></figure><ul><li>停止</li></ul><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">uwsgi <span class="hljs-comment">--stop uwsgi.pid</span><br></code></pre></td></tr></table></figure><blockquote><p>其中<br>–ini config.ini 表示指定运行的配置文件<br>-d uwsgi.log 表示uwsgi在后台运行,运行过程中产生的日志会存储在uwsgi.log中</p></blockquote><ul><li>配置nginx服务器</li></ul><p>编辑文件:/etc/nginx/sites-available/default</p><p>修改为如下内容:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span> default_server;<br><br>    <span class="hljs-attribute">server_name</span> <span class="hljs-number">59.110.240.237</span>;    <br><br>    <span class="hljs-attribute">location</span> / &#123;<br>        <span class="hljs-attribute">include</span> uwsgi_params;<br>        <span class="hljs-attribute">uwsgi_pass</span> <span class="hljs-number">59.110.240.237:5000</span>;<br>        <span class="hljs-attribute">uwsgi_read_timeout</span> <span class="hljs-number">100</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>将server中原有的,上述配置中不能存在的内容注释或删除掉</p><ul><li>启动和停止nginx服务器</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/i</span>nit.d/nginx start <span class="hljs-comment">#启动</span><br><span class="hljs-regexp">/etc/i</span>nit.d/nginx stop  <span class="hljs-comment">#停止</span><br></code></pre></td></tr></table></figure><h2 id="本地项目的远程部署"><a href="#本地项目的远程部署" class="headerlink" title="本地项目的远程部署"></a>本地项目的远程部署</h2><ul><li>3,创建虚拟环境</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">mkvirtualenv</span> 虚拟环境名称<br></code></pre></td></tr></table></figure><ul><li>4,在虚拟环境中安装项目所需要的依赖</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> -r 依赖文件(requirements.txt)<br></code></pre></td></tr></table></figure><ul><li>5,通过scp命令将整个项目上传到远程服务器</li></ul><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs aspectj">scp -r 本地目录 用户名<span class="hljs-meta">@ip</span>地址:远程目录<br></code></pre></td></tr></table></figure><ul><li>6,创建config.ini文件,配置和之前一致,但要加入一个虚拟环境的配置</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">pythonpath = <span class="hljs-regexp">/root/</span>.virtualenvs<span class="hljs-regexp">/flask_test/</span>lib<span class="hljs-regexp">/python2.7/</span>site-packages <span class="hljs-comment">#表示指定虚拟环境目录,使用虚拟环境中安装的扩展</span><br></code></pre></td></tr></table></figure><ul><li>7,运行uwsgi和之前操作一致,但要修改项目目录</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">uwsgi --ini config.ini<br></code></pre></td></tr></table></figure><ul><li>8,运行nginx和之前操作一致,但要修改项目目录</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">/etc/init.d/nginx start<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>主键 超键 候选键 外键是什么</title>
    <link href="/2021/07/14/%E4%B8%BB%E9%94%AE%20%E8%B6%85%E9%94%AE%20%E5%80%99%E9%80%89%E9%94%AE%20%E5%A4%96%E9%94%AE/"/>
    <url>/2021/07/14/%E4%B8%BB%E9%94%AE%20%E8%B6%85%E9%94%AE%20%E5%80%99%E9%80%89%E9%94%AE%20%E5%A4%96%E9%94%AE/</url>
    
    <content type="html"><![CDATA[<p>主键 超键 候选键 外键是什么</p><h4 id="一、定义"><a href="#一、定义" class="headerlink" title="一、定义"></a>一、定义</h4><p><strong>超键(super key)</strong>: 在关系中能唯一标识元组的属性集称为关系模式的超键.</p><p><strong>候选键(candidate key)</strong>: 不含有多余属性的超键称为候选键。也就是在候选键中，若再删除属性，就不是键了！</p><p><strong>主键(primary key)</strong>: 用户选作元组标识的一个候选键程序主键</p><p>**外键(foreign key)**：如果关系模式R中属性K是其它模式的主键，那么k在模式R中称为外键。</p><h4 id="二、举例"><a href="#二、举例" class="headerlink" title="二、举例"></a>二、举例</h4><p>比如有如下数据：</p><table><thead><tr><th align="center">学号</th><th align="center">姓名</th><th align="center">性别</th><th align="center">年龄</th><th align="center">系别</th><th align="center">专业</th></tr></thead><tbody><tr><td align="center">20020612</td><td align="center">李辉</td><td align="center">男</td><td align="center">20</td><td align="center">计算机</td><td align="center">软件开发</td></tr><tr><td align="center">20060613</td><td align="center">张明</td><td align="center">男</td><td align="center">18</td><td align="center">计算机</td><td align="center">软件开发</td></tr><tr><td align="center">20060614</td><td align="center">王小玉</td><td align="center">女</td><td align="center">19</td><td align="center">物理</td><td align="center">力学</td></tr><tr><td align="center">20060615</td><td align="center">李淑华</td><td align="center">女</td><td align="center">17</td><td align="center">生物</td><td align="center">动物学</td></tr><tr><td align="center">20060616</td><td align="center">赵静</td><td align="center">男</td><td align="center">21</td><td align="center">化学</td><td align="center">食品化学</td></tr><tr><td align="center">20060617</td><td align="center">赵静</td><td align="center">女</td><td align="center">20</td><td align="center">生物</td><td align="center">植物学</td></tr></tbody></table><ol><li><p>超键</p><p> 在关系中能唯一标识元组的属性集称为关系模式的超键。</p><p> 于是我们从例子中可以发现 学号是标识学生实体的唯一标识。那么该元组的超键就为学号。</p><p> 除此之外我们还可以把它跟其他属性组合起来，比如：</p><p> (<code>学号</code>，<code>性别</code>)</p><p> (<code>学号</code>，<code>年龄</code>)</p><p> 这样也是超键.</p></li><li><p>候选键</p><p> 不含多余属性的超键为候选键。</p><p> 根据例子可知，学号是一个可以唯一标识元组的唯一标识，因此学号是一个候选键，实际上，候选键是超键的子集，比如 （学号，年龄）是超键，但是它不是候选键。因为它还有了额外的属性。</p></li><li><p>主键</p><p> 用户选择的候选键作为该元组的唯一标识，那么它就为主键。</p><p> 简单的说，例子中的元组的候选键为学号，但是我们选定他作为该元组的唯一标识，那么学号就为主键。</p></li><li><p>外键</p><p> 外键是相对于主键的，比如在学生记录里，主键为学号，在成绩单表中也有学号字段，因此学号为成绩单表的外键，为学生表的主键。</p></li></ol><h4 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h4><p><strong>主键为候选键的子集，候选键为超键的子集，而外键的确定是相对于主键的。</strong></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/07/14/hello-world/"/>
    <url>/2021/07/14/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
